import os
import random
import io
import json
from telegram import Update, InputFile, Bot
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
from fastapi import FastAPI, Request
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.environ["BOT_TOKEN"]
ARCHIVE_CHAT_ID = os.environ["ARCHIVE_CHAT_ID"]
TEXTS_FOLDER_ID = os.environ["READ_FOLDER_ID"]
GOOGLE_CREDENTIALS = json.loads(os.environ["GOOGLE_CREDENTIALS"])

SCOPES = ['https://www.googleapis.com/auth/drive.readonly']
credentials = service_account.Credentials.from_service_account_info(
    GOOGLE_CREDENTIALS, scopes=SCOPES
)
drive_service = build('drive', 'v3', credentials=credentials)

WAITING_PHOTO = 1
user_codes = {}
user_photo_counts = {}

app = FastAPI()
bot = Bot(token=BOT_TOKEN)
application = Application.builder().token(BOT_TOKEN).build()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f""" üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {update.effective_user.first_name}!
–Ø —Ä–∞–¥–∞, —á—Ç–æ –≤—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∑–∞—Ç–µ–µ –ø–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—é –í–∏–∫–∏–ø–µ–¥–∏–∏ :) –≠—Ç–æ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç, –∑–∞–¥–∞—á–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è kraken-–º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å —Ä—É–∫–æ–ø–∏—Å–∏ –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ä—É—Å—Å–∫–æ–º.

–ë–æ—Ç –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤–∞—à –Ω–∏–∫ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

–í–æ—Ç —á—Ç–æ —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ /gettext . –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç.

‚úçÔ∏è –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç *–∏–ª–∏ –µ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç*.

‚úÖ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏.

–ü—Ä–∏—Å—Ç—É–ø–∏–º? –ù–∞–∂–∏–º–∞–π—Ç–µ /gettext
"""
    )

async def get_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    results = drive_service.files().list(
        q=f"'{TEXTS_FOLDER_ID}' in parents and mimeType='text/plain' and trashed = false",
        fields="files(id, name)"
    ).execute()
    files = results.get('files', [])
    if not files:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤.")
        return ConversationHandler.END

    file = random.choice(files)
    file_id = file['id']
    file_name = file['name']
    code = file_name.replace('.txt', '')

    request = drive_service.files().get_media(fileId=file_id)
    fh = io.BytesIO()
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while not done:
        _, done = downloader.next_chunk()

    fh.seek(0)
    text = fh.read().decode('utf-8')

    user_id = update.effective_user.id
    user_codes[user_id] = code
    user_photo_counts[user_id] = 0

    await update.message.reply_text(f"{text}\n\n–í–∞—à –∫–æ–¥: {code}")
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –æ—Ç —Ä—É–∫–∏ —Ç–µ–∫—Å—Ç–∞ (JPG –∏–ª–∏ PNG).")
    return WAITING_PHOTO

async def receive_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_codes:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é /gettext.")
        return ConversationHandler.END

    code = user_codes[user_id]
    user_photo_counts[user_id] += 1
    suffix = user_photo_counts[user_id]

    photo = update.message.photo[-1] if update.message.photo else None
    if not photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return WAITING_PHOTO

    file = await context.bot.get_file(photo.file_id)
    filename = f"{code}_{suffix}.jpg"
    await file.download_to_drive(filename)

    with open(filename, "rb") as img:
        await context.bot.send_photo(
            chat_id=ARCHIVE_CHAT_ID,
            photo=InputFile(img),
            caption=f"{code}_{suffix}"
        )

    os.remove(filename)
    await update.message.reply_text("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
    return ConversationHandler.END

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("gettext", get_text)],
    states={WAITING_PHOTO: [MessageHandler(filters.PHOTO, receive_photo)]},
    fallbacks=[CommandHandler("start", start)]
)

application.add_handler(CommandHandler("start", start))
application.add_handler(conv_handler)

@app.post(f"/{BOT_TOKEN}")
async def webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, bot)
    await application.update_queue.put(update)
    return {"ok": True}
